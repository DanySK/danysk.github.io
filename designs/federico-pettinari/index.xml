<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Federico Pettinari on Danilo Pianini</title>
    <link>https://danysk.github.io/designs/federico-pettinari/</link>
    <description>Recent content in Federico Pettinari on Danilo Pianini</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â© Danilo Pianini</copyright>
    <lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://danysk.github.io/designs/federico-pettinari/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Collective Adaptive Approach to Decentralised k-Coverage in Multi-robot Systems</title>
      <link>https://danysk.github.io/portfolio/2022-taas-smartcam/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://danysk.github.io/portfolio/2022-taas-smartcam/</guid>
      <description>&lt;h4 id=&#34;abstract&#34;&gt;Abstract&lt;/h4&gt;&#xA;&lt;p&gt;We focus on the online multi-object k-coverage problem (OMOkC), where mobile robots are required to sense a mobile target from k diverse points of view, coordinating themselves in a scalable and possibly decentralised way. There is active research on OMOkC, particularly in the design of decentralised algorithms for solving it. We propose a new take on the issue: Rather than classically developing new algorithms, we apply a macro-level paradigm, called aggregate computing, specifically designed to directly program the global behaviour of a whole ensemble of devices at once. To understand the potential of the application of aggregate computing to OMOkC, we extend the Alchemist simulator (supporting aggregate computing natively) with a novel toolchain component supporting the simulation of mobile robots. This way, we build a software engineering toolchain comprising language and simulation tooling for addressing OMOkC. Finally, we exercise our approach and related toolchain by introducing new algorithms for OMOkC; we show that they can be expressed concisely, reuse existing software components and perform better than the current state-of-the-art in terms of coverage over time and number of objects covered overall.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
