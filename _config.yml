title: Danilo Pianini
subtitle: Engineer, Scientist, Developer
description: >- # this means to ignore newlines until "baseurl:"
  Danilo Pianini: Engineer, Scientist, Developer

url: "https://danysk.github.io" # the base hostname & protocol for your site, e.g. https://example.github.io
baseurl: "/devlopr-jekyll" # the subpath of your site, e.g. /blog
# Backward compatibility
urlimg: /devlopr-jekyll/assets/img/posts/

urls:
  - text: Blog
    url: /blog
  # - text: Gallery
  #   url: /gallery
  - text: Contact Me
    url : /contact
  # - text: Styleguide
  #   url: /styleguide
  # - text: Get Started
  #   url: /get-started

tag_page_layout: tag_page
tag_page_dir: blog/tags

author_logo: profile.png
author: Danilo Pianini
author_bio: >-
  Fixed-term Post-doc researcher at the University of Bologna.
  Software engineer, designer and developer of the Protelis programming language, the Alchemist simulator, and several other libraries and tools.
  Proficient in Java, Kotlin, Scala, Python, Xtend.
  Can also write in Groovy, Bash, Ruby, C, Rust, Prolog, Javascript.
  Build automation and continuous integration zealot.

author_email: "danilo.pianini@gmail.com"
author_email_md5: b96269945e9426825bdbba067eb3eaed
author_location: Cesena, Italy
author_website_url: "http://www.danilopianini.org"
author_cv: https://github.com/DanySK/Curriculum-Vitae/releases/latest/download/curriculum.pdf
typewrite-text: Engineer, Scientist, Developer

publications:
  - title: "Aggregate Programming for the Internet of Things"
    authors: Jacob Beal, Danilo Pianini, and Mirko Viroli
    doi: 10.1109/MC.2015.261
    abstract: >- 
      Through field calculus constructs and building-block APIs,
      aggregate programming could help unlock the IoT's true potential
      by allowing complex distributed services to be specified succinctly and
      by enabling such services to be safely encapsulated, modulated, and composed with one another.
    visibility: true
  - title: "Protelis: Practical Aggregate Programming"
    authors: Danilo Pianini, Mirko Viroli, and Jacob Beal
    doi: 10.1145/2695664.2695913
    abstract: >- 
      The notion of a computational field has been proposed as a unifying abstraction for developing distributed systems,
      focusing on the computations and coordination of aggregates of devices instead of individual behavior.
      Prior field-based languages, however, have suffered from a number of practical limitations that have posed barriers to adoption and use.
      We address these limitations by introduction of Protelis,
      a functional language based on computational fields and embedded in Java,
      thereby enabling the construction of widely reusable components of aggregate systems.
      We demonstrate the simplicity of Protelis integration and programming through two examples:
      simulation of a pervasive computing scenario in the Alchemist simulator,
      and coordinated management of a network of services.
    visibility: true
  - title: Chemical-oriented simulation of computational systems with Alchemist
    authors: Danilo Pianini, Sara Montagna, and Mirko Viroli
    doi: 10.1057/jos.2012.27
    abstract: >- 
      In this paper we address the engineering of complex and emerging computational systems featuring situatedness,
      adaptivity and self-organisation, like pervasive computing applications in which humans and devices,
      dipped in a very mobile environment, opportunistically interact to provide and exploit information services.
      We adopt a meta-model in which possibly mobile, interconnected and communicating agents work according to a set of chemical-like laws.
      According to this view, substantiated by recent research on pervasive computing systems, we present the Alchemist simulation framework,
      which retains the performance of known Stochastic Simulation Algorithms for (bio)chemistry,
      though it is tailored to the specific features of complex and situated computational systems.
    visibility: true
  - title: From distributed coordination to field calculus and aggregate computing
    authors: Mirko Viroli, Jacob Beal, Ferruccio Damiani, Giorgio Audrito, Roberto Casadei, and Danilo Pianini
    doi: 10.1016/j.jlamp.2019.100486
    abstract: >- 
      Aggregate computing is an emerging approach to the engineering of complex coordination for distributed systems, based on viewing system interactions in terms of information propagating through collectives of devices, rather than in terms of individual devices and their interaction with their peers and environment. The foundation of this approach is the distillation of a number of prior approaches, both formal and pragmatic, proposed under the umbrella of field-based coordination, and culminating into the field calculus, a universal functional programming model for the specification and composition of collective behaviours with equivalent local and aggregate semantics. This foundation has been elaborated into a layered approach to engineering coordination of complex distributed systems, building up to pragmatic applications through intermediate layers encompassing reusable libraries of program components. Furthermore, some of these components are formally shown to satisfy formal properties like self-stabilisation, which transfer to whole application services by functional composition. In this survey, we trace the development and antecedents of field calculus, review the field calculus itself and the current state of aggregate computing theory and practice, and discuss a roadmap of current research directions with implications for the development of a broad range of distributed systems.
    visibility: true
  - title: Engineering Resilient Collective Adaptive Systems by Self-Stabilisation
    authors: Mirko Viroli, Giorgio Audrito, Jacob Beal, Ferruccio Damiani, and Danilo Pianini
    doi: 10.1145/3177774
    abstract: >- 
      Collective adaptive systems are an emerging class of networked computational systems
      particularly suited for application domains such as smart cities, complex sensor networks,
      and the Internet of Things.
      These systems tend to feature large-scale,
      heterogeneity of communication model
      (including opportunistic peer-to-peer wireless interaction)
      and require inherent self-adaptiveness properties to address unforeseen changes
      in operating conditions.
      In this context, it is extremely difficult (if not seemingly intractable)
      to engineer reusable pieces of distributed behaviour
      to make them provably correct and smoothly composable.
      Building on the field calculus, a computational model (and associated toolchain)
      capturing the notion of aggregate network-level computation,
      we address this problem with an engineering methodology coupling formal theory and computer simulation.
      On the one hand, functional properties are addressed by identifying the largest-to-date field calculus fragment generating self-stabilising behaviour,
      guaranteed to eventually attain a correct and stable final state despite any transient perturbation
      in state or topology and including highly reusable building blocks for information spreading,
      aggregation, and time evolution.
      On the other hand, dynamical properties are addressed by simulation,
      empirically evaluating the different performances that can be obtained
      by switching between implementations of building blocks
      with provably equivalent functional properties.
      Overall, our methodology sheds light on how to identify core building blocks of collective behaviour
      and how to select implementations that improve system performance
      while leaving overall system function and resiliency properties unchanged.
    visibility: true
  - title: Self-Adaptation to Device Distribution in the Internet of Things
    authors: 	Jacob Beal, Mirko Viroli, Danilo Pianini, and Ferruccio Damiani
    doi: 10.1145/3105758
    abstract: >- 
      A key problem when coordinating the behaviour of spatially situated networks,
      like those typically found in the Internet of Things (IoT),
      is adaptation to changes impacting network topology, density, and heterogeneity.
      Computational goals for such systems, however,
      are often dependent on geometric properties of the continuous environment
      in which the devices are situated rather than the particulars
      of how devices happen to be distributed through it.
      In this article, we identify a new property of distributed algorithms, eventual consistency,
      which guarantees that computation converges to a final state that approximates a predictable limit,
      based on the continuous environment, as the density and speed of devices increases.
      We then identify a large class of programs that are eventually consistent,
      building on prior results on the field calculus computational model
      that identify a class of self-stabilizing programs.
      Finally, we confirm through simulation of IoT application scenarios
      that eventually consistent programs from this class can provide resilient behavior
      where programs that are only converging fail badly.
    visibility: true
  - title: A Higher-Order Calculus of Computational Fields
    authors: 	Giorgio Audrito, Mirko Viroli, Mirko Viroli, Ferruccio Damiani, Danilo Pianini, and Jacob Beal
    doi: 10.1145/3285956
    abstract: >- 
      The complexity of large-scale distributed systems, particularly when deployed in physical space, calls for new mechanisms to address composability and reusability of collective adaptive behaviour. Computational fields have been proposed as an effective abstraction to fill the gap between the macro-level of such systems (specifying a system’s collective behaviour) and the micro-level (individual devices’ actions of computation and interaction to implement that collective specification), thereby providing a basis to better facilitate the engineering of collective APIs and complex systems at higher levels of abstraction. This article proposes a full formal foundation for field computations, in terms of a core (higher-order) calculus of computational fields containing a few key syntactic constructs, and equipped with typing, denotational and operational semantics. Critically, this allows formal establishment of a link between the micro- and macro-levels of collective adaptive systems by a result of computational adequacy and abstraction for the (aggregate) denotational semantics with respect to the (per-device) operational semantics.


    visibility: true

author_education_details:
  - college_logo: mit.png
    college_name: MIT
    college_url: https://mit.org
    college_degree: CS Engineer
    description: Bachelor of Technology
    visibility: true

author_project_details:
  - project_thumbnail: gamershub.png
    project_title: Gamers Hub
    project_description: A Platform built for Gamers and Game Devs
    project_url: https://gamershub.in
    visibility: true
  - project_thumbnail: hack4r.PNG
    project_title: Hack4r
    project_description: A Platform built for Hackers and Penetration Testers
    project_url: https://hack4r.com
    visibility: true

external_links:
  - name: Research and academy
    sites:
      - baseurl: https://www.unibo.it/sitoweb/
        username: danilo.pianini/en
        icon_name: fas fa-university
        name: University of Bologna
      - baseurl: https://dblp.uni-trier.de/pers/hd/p
        username: Pianini:Danilo
        icon_name: ai ai-dblp
        name: DBLP
      - baseurl: https://scholar.google.it
        username: citations?user=0CLlt5oAAAAJ&hl=en
        icon_name: ai ai-google-scholar
        name: Google Scholar
      - baseurl: https://www.slideshare.net
        username: DanySK
        icon_name: fab fa-slideshare
        name: SlideShare
      - baseurl: http://orcid.org
        username: 0000-0002-8392-5409
        icon_name: ai ai-orcid
        name: ORCID
      - baseurl: https://www.scopus.com/authid
        username: detail.uri?authorId=36997527800
        icon_name: fas fa-book
        name: Scopus
      - baseurl: https://publons.com/researcher
        username: 1103754/danilo-pianini/
        icon_name: ai ai-publons
        name: Publons
  - name: Development
    sites:
      - baseurl: https://github.com
        username: DanySK
        icon_name: fab fa-github
        name: GitHub
      - baseurl: https://bitbucket.org
        username: danysk
        icon_name: fab fa-bitbucket
        name: Bitbucket
      - baseurl: https://gitlab.com
        username: danilo.pianini
        icon_name: fab fa-gitlab
        name: GitLab
  - name: Social and misc
    sites:
      - name: Facebook
        baseurl: https://www.facebook.com
        username: danilo.pianini
        icon_name: fab fa-facebook
      - name: Instagram
        baseurl: https://www.instagram.com
        username: pianinidanilo
        icon_name: fab fa-instagram
      - name: Linkedin
        baseurl: https://www.linkedin.com/in
        username: danilo-pianini
        icon_name: fab fa-linkedin
      - name: Steam
        baseurl: https://steamcommunity.com/id
        username: danysk
        icon_name: fab fa-steam
      - name: Twitter
        baseurl: https://twitter.com
        username: DanySK86
        icon_name: fab fa-twitter
      - name: YouTube
        baseurl: https://www.youtube.com/channel
        username: UCbMONiRSiUzvuyBldnsDT_g
        icon_name: fab fa-youtube


# devel links
github_username: DanySK

# social links
twitter_username: DanySK86
facebook_username: danilo.pianini
linkedin_username: danilo-pianini
#behance_username: johndoe
instagram_username: pianinidanilo
#medium_username: johndoe
telegram_username: danilo_pianini
#dribbble_username: johndoe
#flickr_username: johndoe
youtube_username: UCbMONiRSiUzvuyBldnsDT_g

#for comments ( we got Disqus and Hyvor Commenting, uncomment the one you want to use )

disqus_shortname: danysk
# hyvor_talk_website_id: 476

# wakatime username (coding activity)
wakatime_username: DanySK

# mailchimp embedded form url (newsletter):
# mailchimp_form_url: https://sujaykundu.us10.list-manage.com/subscribe/post?u=50bab1c85eae24ecfb0f68361&amp;id=3a2dd721d0

# formspree (contact form)
formspree_email: danilo.pianini@gmail.com

# syntax highlighter
markdown: kramdown
kramdown:
  math_engine: katex
highlighter: rouge
permalink: pretty

# google analytics
# google_analytics: UA-46783401-10

# Choose what to show ( can be true or false)
show_publications: true
show_author_education_details: false
show_author_project_details: false

# algolia search
algolia:
  application_id: RP54YOSEID
  index_name: blog # You can replace that with whatever name you want
  files_to_exclude: []
  nodes_to_index: 'article'
  search_only_api_key: 12ecc265649df95a8e739615338e8e1e

# pagination of posts
paginate: 4
per_page: 4
paginate_path: "/blog/page/:num/"

# minify
# compress_html:
#   clippings: all
#   comments: ["<!-- ", " -->"]
#   endings: all
#   ignore:
#     envs: ['development']

# Archives
# jekyll-archives:
#   enabled:
#     - categories
#   layout: archive
#   permalinks:
#     category: '/category/:name/'

# Shop
collections:
 - products

# Gallery
defaults:
  -
    scope:
      path: "gallery"
    values:
      permalink: /:path/:basename:output_ext

# Build settings
plugins:
  - jekyll-feed
  - jekyll-paginate
  - jekyll-gist
  - jekyll-seo-tag
  - jekyll-sitemap
  - jekyll-algolia
  - jekyll-menus


# Exclude from processing.
# The following items will not be processed, by default.
# Any item listed under the `exclude:` key here will be automatically added to
# the internal "default list".
#
# Excluded items can be processed by explicitly listing the directories or
# their entries' file path in the `include:` list.
#
exclude:
  - .sass-cache/
  - .jekyll-cache/
  - gemfiles/
  - Gemfile
  - Gemfile.lock
  - node_modules/
  - vendor/bundle/
  - vendor/cache/
  - vendor/gems/
  - vendor/ruby/

destination: ./build

